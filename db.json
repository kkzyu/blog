{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/musicshare.jpg","path":"musicshare.jpg","modified":1,"renderable":0},{"_id":"source/headpic.jpg","path":"headpic.jpg","modified":1,"renderable":0},{"_id":"node_modules/hexo-theme-vivia/source/avatar.jpg","path":"avatar.jpg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-180.png","path":"images/favicon-dark-180.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-192.png","path":"images/favicon-dark-192.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-32.png","path":"images/favicon-dark-32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-128.png","path":"images/favicon-light-128.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-192.png","path":"images/favicon-light-192.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-32.png","path":"images/favicon-light-32.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/tile.png","path":"images/tile.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-180.png","path":"images/favicon-light-180.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-128.png","path":"images/favicon-dark-128.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/color.global.min.js","path":"js/color.global.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/light-dark-switch.js","path":"js/light-dark-switch.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/load-settings.js","path":"js/load-settings.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Bold.ttf","path":"css/fonts/Roboto-Bold.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Medium.ttf","path":"css/fonts/Roboto-Medium.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Regular.ttf","path":"css/fonts/Roboto-Regular.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/day1-react-learning.md","hash":"b798632da5483675eead687b6cf53be5316e6f9e","modified":1751940661410},{"_id":"source/_posts/day2-react-learning.md","hash":"b9a6c5ce0a6b5f9732641bc35ec52d2682b3eb6f","modified":1752031510876},{"_id":"source/_posts/github-actions.md","hash":"d5076e1f8cdc8bbf691acaca1ef7b92149b4b0b7","modified":1751939069143},{"_id":"source/_posts/pinia重构.md","hash":"eff92689d6119ef6d0df94c2f5de1a1baa1b2f58","modified":1751939069143},{"_id":"source/_posts/仓库迁移.md","hash":"12be881b0b63f35a5a17c8e1ffa906e8fad18f99","modified":1751939069143},{"_id":"source/about/index.md","hash":"81b33337835322f7f2529608649942209b4211c6","modified":1751939069143},{"_id":"source/_posts/hello-world.md","hash":"844d0cfda9ca40852898f7c90f0cbb426d22f6c9","modified":1751939069143},{"_id":"node_modules/hexo-theme-vivia/LICENSE","hash":"dc75163d38c26492bbd3bd179b43dc6156489bf9","modified":1751939068279},{"_id":"node_modules/hexo-theme-vivia/.gitattributes","hash":"78d61b8d5577d8909a33e526f0b968a5a6a81c1c","modified":1751939068279},{"_id":"node_modules/hexo-theme-vivia/example_config.vivia.yml","hash":"2d72d4d0bbb6fd3e5d82d26f11911c6c2b559ff4","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/README.md","hash":"7b9d473bf3f164593209cd7dd313dd0dc10a5038","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/example_zh_CN_config.vivia.yml","hash":"2a9cff66640ac67853d80dbdc815ad9d40bbf854","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/README.zh-CN.md","hash":"af91b61243c77f174e5fa4f3bff47b72d61052dd","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/package.json","hash":"f25e6e9d9cb241028432f96f87bc764d124ab78e","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/languages/en.yml","hash":"b3606fd1531f851419551b1eede2a7a2c4b06304","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/languages/zh-CN.yml","hash":"6d3744d6c14eb2590249ed59892d06fbd1929a5a","modified":1751939068280},{"_id":"node_modules/hexo-theme-vivia/languages/zh.yml","hash":"e56bebd19d2abd1698e9aa87d337941957977468","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/languages/zh-TW.yml","hash":"e652bd780c02c2ab3a25c834140618902ece1499","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/layout.ejs","hash":"28faaa32bc5c16147b8163ff9281df7bc446b4bf","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/index.ejs","hash":"855cf21ff57263654dc0c70271718c7dc2c04add","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/scripts/archive-helper.js","hash":"aa1c8841c64ec4cfdf084e4670471105baf8038a","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/scripts/color-generate.js","hash":"4437ea1ccf9159ececb4015cc6cc72a84e7a1930","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/scripts/categories-process.js","hash":"49f0b31b9fee537579d7329d1fe32a7e98886413","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/favicon.ico","hash":"6c4f53ed166e0a330d4931d77a58b09b8bdaf832","modified":1751939068305},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/menu.ejs","hash":"47f04d2c6413beaffee57d6164b5637bdb2cd1cb","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/source/avatar.jpg","hash":"1266791ae8dc4dd620d03d2c6a56d078a1244df7","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/dark_mode.ejs","hash":"0ea0e23fb16103f424591cf46939fcf07738ccc1","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/navigate_before.ejs","hash":"1c11e29aa2719674b161c072e53576ac38b1ee65","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/rss_feed.ejs","hash":"8bac3aa45c0e7a55f38783e7350039d0b1adb48b","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/wb_sunny.ejs","hash":"ef254cc64ba10918218a6672e34fd5f6d4ce08bb","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_icon/navigate_next.ejs","hash":"c3ecb137ebc9bb949aebe3fc0631b05ba578c8e1","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/category.ejs","hash":"11cac02c0dfad00fc787452a8aa83ecf6e3da196","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/profile.ejs","hash":"edea2c26bb4ac3b8e925b7191bd871e119cb915a","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/color.ejs","hash":"2358392430560df30299753537bc45891cf86977","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/archive.ejs","hash":"84779c10d867eedbe394f210e35dc06b44daab4b","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/recent_posts.ejs","hash":"01a612252514f79fed35d2726e4e8c11882be0f3","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/_widget/tag.ejs","hash":"c438b8fa917b77c70d1add9729a948e03608d2e6","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/article.ejs","hash":"3b5cd0e22392375a2b78f565f09590463b794907","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/archive.ejs","hash":"b5d71356d87a8c3e6ff4effdf6c42609cb30856b","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/back-to-top.ejs","hash":"7d9f69e8376cf84ee1f19828682c4782ed59a41a","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1751939068281},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/footer.ejs","hash":"3cf3b39dc04045df3cc7c92c95fe28463a856438","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/baidu-analytics.ejs","hash":"41047fab0aae2d92b8614c1ef1423a4e83b900ea","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/head.ejs","hash":"036e10adf7de2941fc63783225c5b3e46460c90c","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/sidebar.ejs","hash":"5e6e850b6d7387bed437b5b3b803ddea0638dbf5","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/navbar.ejs","hash":"bcd3762cf28aedde3a7c418e04249f9ba686e94e","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/banner.ejs","hash":"9656debca5f0f53c1982c6daab6a52e8923e7983","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/source/css/_extend.styl","hash":"c9444428bac649cb155c5625f24936971f942124","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_variables.styl","hash":"f1f0c6e43aa6a4301b06ac7e54c4b39f26c4f5b8","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/style.styl","hash":"cb279b85e22e9ec70e1f14ba46650910822ccee3","modified":1751939068305},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1751939068305},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1751939068305},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1751939068305},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1751939068306},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1751939068306},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1751939068306},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1751939068306},{"_id":"node_modules/hexo-theme-vivia/source/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1751939068307},{"_id":"node_modules/hexo-theme-vivia/source/js/color.global.min.js","hash":"9f9484bee263e19d060552c42c79bb9e151b54a0","modified":1751939068307},{"_id":"node_modules/hexo-theme-vivia/source/js/light-dark-switch.js","hash":"112842dd773019c91d6f4b32dcda7ae01ca8e05e","modified":1751939068308},{"_id":"node_modules/hexo-theme-vivia/source/js/load-settings.js","hash":"17fa6bd9a652f822348e00c6432d44db42828df0","modified":1751939068308},{"_id":"node_modules/hexo-theme-vivia/source/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1751939068305},{"_id":"node_modules/hexo-theme-vivia/source/js/script.js","hash":"faef3cfd08d0628d0e0840a21a5a3fa4d6e1703d","modified":1751939068308},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/category.ejs","hash":"c484df219ff1710c09db50ff48467a701aefabf1","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/date.ejs","hash":"b82ba6d625fdce3e29d69ad888eddeb31c76b28b","modified":1751939068282},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/gallery.ejs","hash":"9e5d84a50745caeeae376cf8691ef20cc9d386cb","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/nav.ejs","hash":"4fda522abb4ad4a9814c77d35f4b6a07ab32508d","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/color.styl","hash":"2903c2d78117134174cacd830fc06971f6d6e6ca","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/config.styl","hash":"89e6fd381090c5b7fdae52856634abdc0fec360e","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/layout/_partial/post/title.ejs","hash":"112f1fed9afa71896a40f50a5eb8fe4e5d5fb1c0","modified":1751939068283},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/archive.styl","hash":"e03cb2013f1e19257c9b4059004e6ef94b15de71","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/back-to-top.styl","hash":"ee750d68838670c4818fca0202fa432c3dd46526","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/article.styl","hash":"a0fa537555d519a6d54d1a1599b8be908be6460a","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/comment.styl","hash":"df615699d04a4817f99d7d6b9de8ab5b391287bd","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/footer.styl","hash":"ad9294cf869c956e834e7ec31388c88763ec17c2","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/header.styl","hash":"c4e459440d83a5041ac3243e9c24b6662adacf24","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/highlight.styl","hash":"885df08cc8180cf1e597703682346d22ec7bddb3","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/main-title.styl","hash":"234912a312eeb3fbb519104edf9d08733efdd74a","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/sidebar-aside.styl","hash":"5175242f56689999aa8db4282c6d29f53a17e44e","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/settings.styl","hash":"1b649aa855c08632a92b428ee1f65bdcb8cda905","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/_partial/sidebar.styl","hash":"d03ca7b9e56e2d3967b6214d42c229bdb6bdf98f","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1751939068308},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1751939068304},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1751939068304},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1751939068284},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1751939068292},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1751939068292},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1751939068292},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1751939068292},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1751939068303},{"_id":"source/musicshare.jpg","hash":"adeef7aadc8aafb7d23aa36cd59d469b31d8f45c","modified":1751939069151},{"_id":"source/headpic.jpg","hash":"9e2c72c5bd71b934ae134b621981a918281352f1","modified":1751939069143},{"_id":"node_modules/hexo-theme-vivia/source/css/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1751939068302},{"_id":"public/about/index.html","hash":"595b10d829961f1d9fc5fadd248b7dfec7682bdc","modified":1752031861336},{"_id":"public/2025/07/09/day2-react-learning/index.html","hash":"2445e89e6ce6c9402ce99e61ba004dc291d98088","modified":1752031861336},{"_id":"public/2025/07/08/day1-react-learning/index.html","hash":"828f1cc2ec5b5c3f5a230027f65b14fec32fa50b","modified":1752031861336},{"_id":"public/2025/05/22/github-actions/index.html","hash":"44ae010bda231958a839100e5233c03fed7dca70","modified":1752031861336},{"_id":"public/2025/04/28/pinia重构/index.html","hash":"ba1b15b0e66f1abbe063a5e22e18e5dab6b94dca","modified":1752031861336},{"_id":"public/2025/04/29/仓库迁移/index.html","hash":"e09bc69f8c9050eaa85eda9a3da3350ec6b509cb","modified":1752031861336},{"_id":"public/2025/04/12/hello-world/index.html","hash":"a62add26790834c0626906d65762dc613a0ebe41","modified":1752031861336},{"_id":"public/archives/index.html","hash":"081cf720681afac64ca599b1834fb1d47b8b9be7","modified":1752031861336},{"_id":"public/archives/2025/index.html","hash":"444045ac36435e3244ee0d72dc56276b2f3fcea9","modified":1752031861336},{"_id":"public/archives/2025/07/index.html","hash":"76622fe2a8c55cd735f936a38397f484c1d43fb8","modified":1752031861336},{"_id":"public/index.html","hash":"96cb6d2bb53862e94db8c58e495d80461b746198","modified":1752031861336},{"_id":"public/archives/2025/05/index.html","hash":"4e3b33c984bea6200cbd5ed6106dce7b36db9a06","modified":1752031861336},{"_id":"public/archives/2025/04/index.html","hash":"d95a89bead32312870b6140e56e207cab272a69c","modified":1752031861336},{"_id":"public/tags/react/index.html","hash":"51d63972af26b425f0b0d5072929a7b8daffc5c4","modified":1752031861336},{"_id":"public/tags/web前端/index.html","hash":"070b377af934da274e72dfa92de17aa7540427e4","modified":1752031861336},{"_id":"public/tags/git/index.html","hash":"56e0abfc9a48ca173ac8b4e84fbde30ffb6b7ef4","modified":1752031861336},{"_id":"public/favicon.ico","hash":"6c4f53ed166e0a330d4931d77a58b09b8bdaf832","modified":1752031861336},{"_id":"public/images/favicon-dark-192.png","hash":"929acfdd6e69ceacdecf40a03ed520f826750c06","modified":1752031861336},{"_id":"public/images/favicon-dark-32.png","hash":"8ef87b664e5c6250e5badd7312fe192e30fe2e83","modified":1752031861336},{"_id":"public/images/favicon-light-32.png","hash":"604915a91ddede7874d5dcfa4de0bc4b04ae5da6","modified":1752031861336},{"_id":"public/images/favicon-dark-180.png","hash":"4771a6bd0386924ad31719f8999c036b36ad5688","modified":1752031861336},{"_id":"public/images/favicon-light-192.png","hash":"0d5f76f309b6a0661d695d6bf4db8ef8a56e4ae5","modified":1752031861336},{"_id":"public/images/tile.png","hash":"fbc016bfb004a5ca4a8c6f0b078ae320ec98ba20","modified":1752031861336},{"_id":"public/images/favicon-light-128.png","hash":"9c93c4ac222da14ca4f43b2d54573ce4099a161b","modified":1752031861336},{"_id":"public/images/favicon-light-180.png","hash":"6b26caab1d036726beaf47510bada4cddf253b24","modified":1752031861336},{"_id":"public/images/favicon-dark-128.png","hash":"44cceeef5fddc81a613faf6caa53bac139a6b564","modified":1752031861336},{"_id":"public/avatar.jpg","hash":"1266791ae8dc4dd620d03d2c6a56d078a1244df7","modified":1752031861336},{"_id":"public/css/style.css","hash":"731b58e1ae2e40d7aeadb62318fbf13af15619fb","modified":1752031861336},{"_id":"public/js/load-settings.js","hash":"f420677aad3d200b4f92fca60ab5cb47c7db9a21","modified":1752031861336},{"_id":"public/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1752031861336},{"_id":"public/js/light-dark-switch.js","hash":"371eacee9af459d04de60190c549fe7f8374be36","modified":1752031861336},{"_id":"public/js/color.global.min.js","hash":"8140005be5afebb828b2890ce6e686ece34e78df","modified":1752031861336},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1752031861336},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1752031861336},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1752031861336},{"_id":"public/css/fonts/Roboto-Medium.ttf","hash":"3c6a09fcc6a454924c81af7dff94fc6d399ed79b","modified":1752031861336},{"_id":"public/css/fonts/Roboto-Bold.ttf","hash":"62442a18a9fe9457c1afeabf683d263a691b7798","modified":1752031861336},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1752031861336},{"_id":"public/css/fonts/Roboto-Regular.ttf","hash":"56c5c0d38bde4c1f1549dda43db37b09c608aad3","modified":1752031861336},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1752031861336},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1752031861336},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1752031861336},{"_id":"public/musicshare.jpg","hash":"adeef7aadc8aafb7d23aa36cd59d469b31d8f45c","modified":1752031861336},{"_id":"public/headpic.jpg","hash":"9e2c72c5bd71b934ae134b621981a918281352f1","modified":1752031861336}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2025-04-28T03:31:59.000Z","_content":"### 最近在听：\nhttps://music.163.com/playlist?id=13032942246&uct2=U2FsdGVkX18jLF6G3jNcU4ngOvA+ZmMUnndaAVd7KRM=\n![歌单分享](musicshare.jpg)\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2025-04-28 11:31:59\n---\n### 最近在听：\nhttps://music.163.com/playlist?id=13032942246&uct2=U2FsdGVkX18jLF6G3jNcU4ngOvA+ZmMUnndaAVd7KRM=\n![歌单分享](musicshare.jpg)\n\n\n","updated":"2025-07-08T01:44:29.143Z","path":"about/index.html","comments":1,"layout":"page","_id":"cmcvej8kz0000wstv48kj406r","content":"<h3 id=\"最近在听：\"><a href=\"#最近在听：\" class=\"headerlink\" title=\"最近在听：\"></a>最近在听：</h3><p><a href=\"https://music.163.com/playlist?id=13032942246&uct2=U2FsdGVkX18jLF6G3jNcU4ngOvA+ZmMUnndaAVd7KRM=\">https://music.163.com/playlist?id=13032942246&amp;uct2=U2FsdGVkX18jLF6G3jNcU4ngOvA+ZmMUnndaAVd7KRM=</a><br><img src=\"/blog/musicshare.jpg\" alt=\"歌单分享\"></p>\n","length":104,"excerpt":"","more":"<h3 id=\"最近在听：\"><a href=\"#最近在听：\" class=\"headerlink\" title=\"最近在听：\"></a>最近在听：</h3><p><a href=\"https://music.163.com/playlist?id=13032942246&uct2=U2FsdGVkX18jLF6G3jNcU4ngOvA+ZmMUnndaAVd7KRM=\">https://music.163.com/playlist?id=13032942246&amp;uct2=U2FsdGVkX18jLF6G3jNcU4ngOvA+ZmMUnndaAVd7KRM=</a><br><img src=\"/blog/musicshare.jpg\" alt=\"歌单分享\"></p>\n"}],"Post":[{"layout":"posts","title":"day2-react-learning","date":"2025-07-09T02:04:27.000Z","_content":"用模拟数据写了一个作业管理的详情页，react可以用mock拦截前端发出去的请求，所以可以在这里放置模拟数据。\n给了一个类似这样的界面：\n![alt text](day2-react-learning-1.png)\n1. 首先确定了把整个页面拆分成三个组件（上basicinfocard下documenttablecard），还有一个根组件jobdetail来负责获取jobid，管理整体的加载状态并组织子组件的渲染。\n2. 接着是和后端的交互：\n- 用useEffect Hook，在组件挂载时根据传入的jobid调用service文件夹下job.ts中定义的接口函数getJobDocuments来从后端异步获取文档列表数据。\n- 使用useState创建dataSource状态，用于存储从后端获取的完整文档列表。获取到数据之后，对每条记录增加一个唯一的key属性来满足protable的要求。\n*protable功能确实挺丰富，部署起来也挺快捷的。这里先把它稍微进行了一下更改再拿来用，学习文档：https://procomponents.ant.design/components/table*\n3. protable的核心交互功能：\n- 行选择和批量下载：\n    1. 创建了一个selectedRowKeys状态数组用来存放所有被勾选的行的key。\n    2. 该列用render的方法返回一个<Checkbox>，其勾选状态与selectedRowKeys双向绑定。\n    3. 该列的 title 属性也返回一个 <Checkbox>，作为“全选/取消全选”的控制器。其 checked 和 indeterminate (半选) 状态根据 selectedRowKeys 和 dataSource 的长度动态计算，实现了精确的全选逻辑。\n- 在名称列，将其渲染为一个 <Button type=\"link\">，使其外观像一个可点击的链接。用<Modal> 窗口来显示日志内容（用setLogModalVisible来控制）。\n- 把protable的搜索功能取消（因为组件样式的自定义改动空间不大），自定义了一个<Input.Search> 组件。其 onSearch 事件会更新 searchText 状态。创建一个派生变量 filteredDataSource。它通过对原始的 dataSource 数组使用 .filter() 方法，根据 searchText 的值进行客户端实时过滤。ProTable 的 dataSource 属性直接使用这个过滤后的数据，从而实现了搜索功能。\n\n学习到的新知识：\n1. Hooks：\n    1. useState：相当于内部记忆（可修改的便签纸），用于为函数组件添加状态。\n    比如const [logModalVisible（便签纸）, setLogModalVisible（专用于修改便签纸的笔）] = useState(false)，其中logModalVisible的状态就是false。我们可以并只能通过调用setLogModalVisible(true)来更新便签纸的状态。\n    & useParams：相当于外部指令（门牌号），来自于网页的url地址，而不是内部的组件。它只能读取而无法控制。\n    2. useEffect：用于在特定条件下，自动执行一些份外的任务（比如和外界沟通）。类似于一条如果就的指令。比如说const { jobId } = useParams();就相当于看了一眼网页地址的门牌号，但是无法修改门牌。\n    比如useEffect(() => { fetchData(); }, [jobId]);\n    其中fetchData()意思是去服务器中拿回文件列表，jobid就是触发的ID（如果这个id发生了改变就去服务器拿回文件列表，但是如果还是同一个id的话就不需要跑一趟，用现有的就行。）\n    注意：①如果指令的触发条件是[]，意思即使开机后只执行一次以后都不管了；②如果没有触发条件，意思是任何一点风吹草动都要去执行这个指令。\n    3. useContext：相当于公共广播系统。顶层组件可以通过广播发布信息，比如广播“当前主题：夜间模式”，那么所有组件（深层的也可以）只要打开收音机都会听到这个信息。\n    4. useMemo：用于记住一个复杂的计算结果（重在结果），避免重复计算。\n    5. useCallback：用于记住一个计算公式（重在技能）。这在传递给子组件时非常有用。\n    6. useRef：相当于多功能工具箱，无论怎么刷新箱子里的东西都是同一个不会丢失。修改箱子里的东西也不会触发重新渲染。","source":"_posts/day2-react-learning.md","raw":"---\nlayout: posts\ntitle: day2-react-learning\ndate: 2025-07-09 10:04:27\ntags: [react, web前端]\n---\n用模拟数据写了一个作业管理的详情页，react可以用mock拦截前端发出去的请求，所以可以在这里放置模拟数据。\n给了一个类似这样的界面：\n![alt text](day2-react-learning-1.png)\n1. 首先确定了把整个页面拆分成三个组件（上basicinfocard下documenttablecard），还有一个根组件jobdetail来负责获取jobid，管理整体的加载状态并组织子组件的渲染。\n2. 接着是和后端的交互：\n- 用useEffect Hook，在组件挂载时根据传入的jobid调用service文件夹下job.ts中定义的接口函数getJobDocuments来从后端异步获取文档列表数据。\n- 使用useState创建dataSource状态，用于存储从后端获取的完整文档列表。获取到数据之后，对每条记录增加一个唯一的key属性来满足protable的要求。\n*protable功能确实挺丰富，部署起来也挺快捷的。这里先把它稍微进行了一下更改再拿来用，学习文档：https://procomponents.ant.design/components/table*\n3. protable的核心交互功能：\n- 行选择和批量下载：\n    1. 创建了一个selectedRowKeys状态数组用来存放所有被勾选的行的key。\n    2. 该列用render的方法返回一个<Checkbox>，其勾选状态与selectedRowKeys双向绑定。\n    3. 该列的 title 属性也返回一个 <Checkbox>，作为“全选/取消全选”的控制器。其 checked 和 indeterminate (半选) 状态根据 selectedRowKeys 和 dataSource 的长度动态计算，实现了精确的全选逻辑。\n- 在名称列，将其渲染为一个 <Button type=\"link\">，使其外观像一个可点击的链接。用<Modal> 窗口来显示日志内容（用setLogModalVisible来控制）。\n- 把protable的搜索功能取消（因为组件样式的自定义改动空间不大），自定义了一个<Input.Search> 组件。其 onSearch 事件会更新 searchText 状态。创建一个派生变量 filteredDataSource。它通过对原始的 dataSource 数组使用 .filter() 方法，根据 searchText 的值进行客户端实时过滤。ProTable 的 dataSource 属性直接使用这个过滤后的数据，从而实现了搜索功能。\n\n学习到的新知识：\n1. Hooks：\n    1. useState：相当于内部记忆（可修改的便签纸），用于为函数组件添加状态。\n    比如const [logModalVisible（便签纸）, setLogModalVisible（专用于修改便签纸的笔）] = useState(false)，其中logModalVisible的状态就是false。我们可以并只能通过调用setLogModalVisible(true)来更新便签纸的状态。\n    & useParams：相当于外部指令（门牌号），来自于网页的url地址，而不是内部的组件。它只能读取而无法控制。\n    2. useEffect：用于在特定条件下，自动执行一些份外的任务（比如和外界沟通）。类似于一条如果就的指令。比如说const { jobId } = useParams();就相当于看了一眼网页地址的门牌号，但是无法修改门牌。\n    比如useEffect(() => { fetchData(); }, [jobId]);\n    其中fetchData()意思是去服务器中拿回文件列表，jobid就是触发的ID（如果这个id发生了改变就去服务器拿回文件列表，但是如果还是同一个id的话就不需要跑一趟，用现有的就行。）\n    注意：①如果指令的触发条件是[]，意思即使开机后只执行一次以后都不管了；②如果没有触发条件，意思是任何一点风吹草动都要去执行这个指令。\n    3. useContext：相当于公共广播系统。顶层组件可以通过广播发布信息，比如广播“当前主题：夜间模式”，那么所有组件（深层的也可以）只要打开收音机都会听到这个信息。\n    4. useMemo：用于记住一个复杂的计算结果（重在结果），避免重复计算。\n    5. useCallback：用于记住一个计算公式（重在技能）。这在传递给子组件时非常有用。\n    6. useRef：相当于多功能工具箱，无论怎么刷新箱子里的东西都是同一个不会丢失。修改箱子里的东西也不会触发重新渲染。","slug":"day2-react-learning","published":1,"updated":"2025-07-09T03:25:10.876Z","comments":1,"photos":[],"_id":"cmcvej8l00001wstvf49o5ijy","content":"<p>用模拟数据写了一个作业管理的详情页，react可以用mock拦截前端发出去的请求，所以可以在这里放置模拟数据。<br>给了一个类似这样的界面：<br><img src=\"/blog/day2-react-learning-1.png\" alt=\"alt text\"></p>\n<ol>\n<li>首先确定了把整个页面拆分成三个组件（上basicinfocard下documenttablecard），还有一个根组件jobdetail来负责获取jobid，管理整体的加载状态并组织子组件的渲染。</li>\n<li>接着是和后端的交互：</li>\n</ol>\n<ul>\n<li>用useEffect Hook，在组件挂载时根据传入的jobid调用service文件夹下job.ts中定义的接口函数getJobDocuments来从后端异步获取文档列表数据。</li>\n<li>使用useState创建dataSource状态，用于存储从后端获取的完整文档列表。获取到数据之后，对每条记录增加一个唯一的key属性来满足protable的要求。<br><em>protable功能确实挺丰富，部署起来也挺快捷的。这里先把它稍微进行了一下更改再拿来用，学习文档：<a href=\"https://procomponents.ant.design/components/table\">https://procomponents.ant.design/components/table</a></em></li>\n</ul>\n<ol start=\"3\">\n<li>protable的核心交互功能：</li>\n</ol>\n<ul>\n<li>行选择和批量下载：<ol>\n<li>创建了一个selectedRowKeys状态数组用来存放所有被勾选的行的key。</li>\n<li>该列用render的方法返回一个<Checkbox>，其勾选状态与selectedRowKeys双向绑定。</li>\n<li>该列的 title 属性也返回一个 <Checkbox>，作为“全选&#x2F;取消全选”的控制器。其 checked 和 indeterminate (半选) 状态根据 selectedRowKeys 和 dataSource 的长度动态计算，实现了精确的全选逻辑。</li>\n</ol>\n</li>\n<li>在名称列，将其渲染为一个 <Button type=\"link\">，使其外观像一个可点击的链接。用<Modal> 窗口来显示日志内容（用setLogModalVisible来控制）。</li>\n<li>把protable的搜索功能取消（因为组件样式的自定义改动空间不大），自定义了一个&lt;Input.Search&gt; 组件。其 onSearch 事件会更新 searchText 状态。创建一个派生变量 filteredDataSource。它通过对原始的 dataSource 数组使用 .filter() 方法，根据 searchText 的值进行客户端实时过滤。ProTable 的 dataSource 属性直接使用这个过滤后的数据，从而实现了搜索功能。</li>\n</ul>\n<p>学习到的新知识：</p>\n<ol>\n<li>Hooks：<ol>\n<li>useState：相当于内部记忆（可修改的便签纸），用于为函数组件添加状态。<br> 比如const [logModalVisible（便签纸）, setLogModalVisible（专用于修改便签纸的笔）] &#x3D; useState(false)，其中logModalVisible的状态就是false。我们可以并只能通过调用setLogModalVisible(true)来更新便签纸的状态。<br> &amp; useParams：相当于外部指令（门牌号），来自于网页的url地址，而不是内部的组件。它只能读取而无法控制。</li>\n<li>useEffect：用于在特定条件下，自动执行一些份外的任务（比如和外界沟通）。类似于一条如果就的指令。比如说const { jobId } &#x3D; useParams();就相当于看了一眼网页地址的门牌号，但是无法修改门牌。<br> 比如useEffect(() &#x3D;&gt; { fetchData(); }, [jobId]);<br> 其中fetchData()意思是去服务器中拿回文件列表，jobid就是触发的ID（如果这个id发生了改变就去服务器拿回文件列表，但是如果还是同一个id的话就不需要跑一趟，用现有的就行。）<br> 注意：①如果指令的触发条件是[]，意思即使开机后只执行一次以后都不管了；②如果没有触发条件，意思是任何一点风吹草动都要去执行这个指令。</li>\n<li>useContext：相当于公共广播系统。顶层组件可以通过广播发布信息，比如广播“当前主题：夜间模式”，那么所有组件（深层的也可以）只要打开收音机都会听到这个信息。</li>\n<li>useMemo：用于记住一个复杂的计算结果（重在结果），避免重复计算。</li>\n<li>useCallback：用于记住一个计算公式（重在技能）。这在传递给子组件时非常有用。</li>\n<li>useRef：相当于多功能工具箱，无论怎么刷新箱子里的东西都是同一个不会丢失。修改箱子里的东西也不会触发重新渲染。</li>\n</ol>\n</li>\n</ol>\n","length":1748,"excerpt":"","more":"<p>用模拟数据写了一个作业管理的详情页，react可以用mock拦截前端发出去的请求，所以可以在这里放置模拟数据。<br>给了一个类似这样的界面：<br><img src=\"/blog/day2-react-learning-1.png\" alt=\"alt text\"></p>\n<ol>\n<li>首先确定了把整个页面拆分成三个组件（上basicinfocard下documenttablecard），还有一个根组件jobdetail来负责获取jobid，管理整体的加载状态并组织子组件的渲染。</li>\n<li>接着是和后端的交互：</li>\n</ol>\n<ul>\n<li>用useEffect Hook，在组件挂载时根据传入的jobid调用service文件夹下job.ts中定义的接口函数getJobDocuments来从后端异步获取文档列表数据。</li>\n<li>使用useState创建dataSource状态，用于存储从后端获取的完整文档列表。获取到数据之后，对每条记录增加一个唯一的key属性来满足protable的要求。<br><em>protable功能确实挺丰富，部署起来也挺快捷的。这里先把它稍微进行了一下更改再拿来用，学习文档：<a href=\"https://procomponents.ant.design/components/table\">https://procomponents.ant.design/components/table</a></em></li>\n</ul>\n<ol start=\"3\">\n<li>protable的核心交互功能：</li>\n</ol>\n<ul>\n<li>行选择和批量下载：<ol>\n<li>创建了一个selectedRowKeys状态数组用来存放所有被勾选的行的key。</li>\n<li>该列用render的方法返回一个<Checkbox>，其勾选状态与selectedRowKeys双向绑定。</li>\n<li>该列的 title 属性也返回一个 <Checkbox>，作为“全选&#x2F;取消全选”的控制器。其 checked 和 indeterminate (半选) 状态根据 selectedRowKeys 和 dataSource 的长度动态计算，实现了精确的全选逻辑。</li>\n</ol>\n</li>\n<li>在名称列，将其渲染为一个 <Button type=\"link\">，使其外观像一个可点击的链接。用<Modal> 窗口来显示日志内容（用setLogModalVisible来控制）。</li>\n<li>把protable的搜索功能取消（因为组件样式的自定义改动空间不大），自定义了一个&lt;Input.Search&gt; 组件。其 onSearch 事件会更新 searchText 状态。创建一个派生变量 filteredDataSource。它通过对原始的 dataSource 数组使用 .filter() 方法，根据 searchText 的值进行客户端实时过滤。ProTable 的 dataSource 属性直接使用这个过滤后的数据，从而实现了搜索功能。</li>\n</ul>\n<p>学习到的新知识：</p>\n<ol>\n<li>Hooks：<ol>\n<li>useState：相当于内部记忆（可修改的便签纸），用于为函数组件添加状态。<br> 比如const [logModalVisible（便签纸）, setLogModalVisible（专用于修改便签纸的笔）] &#x3D; useState(false)，其中logModalVisible的状态就是false。我们可以并只能通过调用setLogModalVisible(true)来更新便签纸的状态。<br> &amp; useParams：相当于外部指令（门牌号），来自于网页的url地址，而不是内部的组件。它只能读取而无法控制。</li>\n<li>useEffect：用于在特定条件下，自动执行一些份外的任务（比如和外界沟通）。类似于一条如果就的指令。比如说const { jobId } &#x3D; useParams();就相当于看了一眼网页地址的门牌号，但是无法修改门牌。<br> 比如useEffect(() &#x3D;&gt; { fetchData(); }, [jobId]);<br> 其中fetchData()意思是去服务器中拿回文件列表，jobid就是触发的ID（如果这个id发生了改变就去服务器拿回文件列表，但是如果还是同一个id的话就不需要跑一趟，用现有的就行。）<br> 注意：①如果指令的触发条件是[]，意思即使开机后只执行一次以后都不管了；②如果没有触发条件，意思是任何一点风吹草动都要去执行这个指令。</li>\n<li>useContext：相当于公共广播系统。顶层组件可以通过广播发布信息，比如广播“当前主题：夜间模式”，那么所有组件（深层的也可以）只要打开收音机都会听到这个信息。</li>\n<li>useMemo：用于记住一个复杂的计算结果（重在结果），避免重复计算。</li>\n<li>useCallback：用于记住一个计算公式（重在技能）。这在传递给子组件时非常有用。</li>\n<li>useRef：相当于多功能工具箱，无论怎么刷新箱子里的东西都是同一个不会丢失。修改箱子里的东西也不会触发重新渲染。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"day1_react_learning","date":"2025-07-08T02:09:50.000Z","_content":"今天看了rdp-fe这个代码库。先从route文件看起，找到一个页面就寻到这个文件下，然后根据导入一路地查看，一直到把这个页面的内容业务技术等完全搞明白，，\n今天就看了myapp这一个界面的，因为还不熟悉react的框架，就多看了一会，对一些函数，包括前后端的交互也有了更深入的了解。\n1. request：私人助理，帮助处理和后端服务器通信时的杂事：\n    1. 自动添加基础url：如 /app2/base_info/list_by_user，它会自动在前面拼上服务器的域名，如 http://api.example.com。\n    2. 统一的认证处理：它会自动从localstorage中读取token，并把它添加到每个请求头header上，这样后端就可以知道你的身份。\n    3. 统一的错误处理：它可以捕获错误，也可以理解后端自定义的业务错误。\n    4. 统一数据转换：它可以自动处理请求参数的格式（比如转换成json），也可以自动解析从后端返回的json响应。\n2. render：自定义这一列的单元格应该如何显示，比如点名册的年龄一列，如果是大等于18则显示已成年，小于则显示未成年。\n3. record：相当于班级点名册中被点名（渲染到）的那个同学的所有信息（姓名，性别，年龄等等）\n4. 前后端交互逻辑：\n    1. app.ts里面给出了所有的用于前后端交互的api函数fun，export意味着这个函数可以被项目中其他文件调用（但并不关心这个函数的格式是否适合被所有的文件调用）。\n    ![alt text](day1-react-learning-1.png)\n    - 括号里面是接受经2转换后的数据B（注意这里不进行转换，只规定了需要进行传送的数据，具体的转换需要通过2来完成）；\n    - return request<...>(...)指示了从后端期望返回的数据格式C。\n    - ({})里面可能包括请求的后端url，请求方法，以及附加的传给后端的查询参数B。\n    2. 由于1中app.ts里面封装的函数fun并不适合被所有的文件调用，所以在一些特定场景会通过编写一个桥梁函数来实现“翻译”的作用，即把A转换成后端能够看懂的数据格式B。\n    ![alt text](day1-react-learning-2.png)\n5. 箭头函数：\n    - const 函数名 = async(传入的参数) =>{函数体,要用return指定返回值};","source":"_posts/day1-react-learning.md","raw":"---\ntitle: day1_react_learning\ndate: 2025-07-08 10:09:50\ntags: [react, web前端]\n\n---\n今天看了rdp-fe这个代码库。先从route文件看起，找到一个页面就寻到这个文件下，然后根据导入一路地查看，一直到把这个页面的内容业务技术等完全搞明白，，\n今天就看了myapp这一个界面的，因为还不熟悉react的框架，就多看了一会，对一些函数，包括前后端的交互也有了更深入的了解。\n1. request：私人助理，帮助处理和后端服务器通信时的杂事：\n    1. 自动添加基础url：如 /app2/base_info/list_by_user，它会自动在前面拼上服务器的域名，如 http://api.example.com。\n    2. 统一的认证处理：它会自动从localstorage中读取token，并把它添加到每个请求头header上，这样后端就可以知道你的身份。\n    3. 统一的错误处理：它可以捕获错误，也可以理解后端自定义的业务错误。\n    4. 统一数据转换：它可以自动处理请求参数的格式（比如转换成json），也可以自动解析从后端返回的json响应。\n2. render：自定义这一列的单元格应该如何显示，比如点名册的年龄一列，如果是大等于18则显示已成年，小于则显示未成年。\n3. record：相当于班级点名册中被点名（渲染到）的那个同学的所有信息（姓名，性别，年龄等等）\n4. 前后端交互逻辑：\n    1. app.ts里面给出了所有的用于前后端交互的api函数fun，export意味着这个函数可以被项目中其他文件调用（但并不关心这个函数的格式是否适合被所有的文件调用）。\n    ![alt text](day1-react-learning-1.png)\n    - 括号里面是接受经2转换后的数据B（注意这里不进行转换，只规定了需要进行传送的数据，具体的转换需要通过2来完成）；\n    - return request<...>(...)指示了从后端期望返回的数据格式C。\n    - ({})里面可能包括请求的后端url，请求方法，以及附加的传给后端的查询参数B。\n    2. 由于1中app.ts里面封装的函数fun并不适合被所有的文件调用，所以在一些特定场景会通过编写一个桥梁函数来实现“翻译”的作用，即把A转换成后端能够看懂的数据格式B。\n    ![alt text](day1-react-learning-2.png)\n5. 箭头函数：\n    - const 函数名 = async(传入的参数) =>{函数体,要用return指定返回值};","slug":"day1-react-learning","published":1,"updated":"2025-07-08T02:11:01.410Z","comments":1,"layout":"post","photos":[],"_id":"cmcvej8l30002wstv6ag80o8q","content":"<p>今天看了rdp-fe这个代码库。先从route文件看起，找到一个页面就寻到这个文件下，然后根据导入一路地查看，一直到把这个页面的内容业务技术等完全搞明白，，<br>今天就看了myapp这一个界面的，因为还不熟悉react的框架，就多看了一会，对一些函数，包括前后端的交互也有了更深入的了解。</p>\n<ol>\n<li>request：私人助理，帮助处理和后端服务器通信时的杂事：<ol>\n<li>自动添加基础url：如 &#x2F;app2&#x2F;base_info&#x2F;list_by_user，它会自动在前面拼上服务器的域名，如 <a href=\"http://api.example.com./\">http://api.example.com。</a></li>\n<li>统一的认证处理：它会自动从localstorage中读取token，并把它添加到每个请求头header上，这样后端就可以知道你的身份。</li>\n<li>统一的错误处理：它可以捕获错误，也可以理解后端自定义的业务错误。</li>\n<li>统一数据转换：它可以自动处理请求参数的格式（比如转换成json），也可以自动解析从后端返回的json响应。</li>\n</ol>\n</li>\n<li>render：自定义这一列的单元格应该如何显示，比如点名册的年龄一列，如果是大等于18则显示已成年，小于则显示未成年。</li>\n<li>record：相当于班级点名册中被点名（渲染到）的那个同学的所有信息（姓名，性别，年龄等等）</li>\n<li>前后端交互逻辑：<ol>\n<li>app.ts里面给出了所有的用于前后端交互的api函数fun，export意味着这个函数可以被项目中其他文件调用（但并不关心这个函数的格式是否适合被所有的文件调用）。<br> <img src=\"/blog/day1-react-learning-1.png\" alt=\"alt text\"></li>\n</ol>\n<ul>\n<li>括号里面是接受经2转换后的数据B（注意这里不进行转换，只规定了需要进行传送的数据，具体的转换需要通过2来完成）；</li>\n<li>return request&lt;…&gt;(…)指示了从后端期望返回的数据格式C。</li>\n<li>({})里面可能包括请求的后端url，请求方法，以及附加的传给后端的查询参数B。</li>\n</ul>\n<ol start=\"2\">\n<li>由于1中app.ts里面封装的函数fun并不适合被所有的文件调用，所以在一些特定场景会通过编写一个桥梁函数来实现“翻译”的作用，即把A转换成后端能够看懂的数据格式B。<br> <img src=\"/blog/day1-react-learning-2.png\" alt=\"alt text\"></li>\n</ol>\n</li>\n<li>箭头函数：<ul>\n<li>const 函数名 &#x3D; async(传入的参数) &#x3D;&gt;{函数体,要用return指定返回值};</li>\n</ul>\n</li>\n</ol>\n","length":896,"excerpt":"","more":"<p>今天看了rdp-fe这个代码库。先从route文件看起，找到一个页面就寻到这个文件下，然后根据导入一路地查看，一直到把这个页面的内容业务技术等完全搞明白，，<br>今天就看了myapp这一个界面的，因为还不熟悉react的框架，就多看了一会，对一些函数，包括前后端的交互也有了更深入的了解。</p>\n<ol>\n<li>request：私人助理，帮助处理和后端服务器通信时的杂事：<ol>\n<li>自动添加基础url：如 &#x2F;app2&#x2F;base_info&#x2F;list_by_user，它会自动在前面拼上服务器的域名，如 <a href=\"http://api.example.com./\">http://api.example.com。</a></li>\n<li>统一的认证处理：它会自动从localstorage中读取token，并把它添加到每个请求头header上，这样后端就可以知道你的身份。</li>\n<li>统一的错误处理：它可以捕获错误，也可以理解后端自定义的业务错误。</li>\n<li>统一数据转换：它可以自动处理请求参数的格式（比如转换成json），也可以自动解析从后端返回的json响应。</li>\n</ol>\n</li>\n<li>render：自定义这一列的单元格应该如何显示，比如点名册的年龄一列，如果是大等于18则显示已成年，小于则显示未成年。</li>\n<li>record：相当于班级点名册中被点名（渲染到）的那个同学的所有信息（姓名，性别，年龄等等）</li>\n<li>前后端交互逻辑：<ol>\n<li>app.ts里面给出了所有的用于前后端交互的api函数fun，export意味着这个函数可以被项目中其他文件调用（但并不关心这个函数的格式是否适合被所有的文件调用）。<br> <img src=\"/blog/day1-react-learning-1.png\" alt=\"alt text\"></li>\n</ol>\n<ul>\n<li>括号里面是接受经2转换后的数据B（注意这里不进行转换，只规定了需要进行传送的数据，具体的转换需要通过2来完成）；</li>\n<li>return request&lt;…&gt;(…)指示了从后端期望返回的数据格式C。</li>\n<li>({})里面可能包括请求的后端url，请求方法，以及附加的传给后端的查询参数B。</li>\n</ul>\n<ol start=\"2\">\n<li>由于1中app.ts里面封装的函数fun并不适合被所有的文件调用，所以在一些特定场景会通过编写一个桥梁函数来实现“翻译”的作用，即把A转换成后端能够看懂的数据格式B。<br> <img src=\"/blog/day1-react-learning-2.png\" alt=\"alt text\"></li>\n</ol>\n</li>\n<li>箭头函数：<ul>\n<li>const 函数名 &#x3D; async(传入的参数) &#x3D;&gt;{函数体,要用return指定返回值};</li>\n</ul>\n</li>\n</ol>\n"},{"title":"pinia重构","date":"2025-04-28T14:05:46.000Z","_content":"### Pinia 重构过程记录\n#### 重构步骤\n\n1. 安装必要依赖\n```bash\nnpm install pinia\n```\n\n2. 创建 Pinia Store\n```js\n// stores/cvStore.js\nimport { defineStore } from 'pinia'\nimport { message } from 'ant-design-vue'\nimport cvDataStructure from '@/assets/data/cv-info.json'\nimport html2canvas from 'html2canvas'\nimport jsPDF from 'jspdf'\n\nexport const useCvStore = defineStore('cv', {\n  state: () => ({\n    currentLang: 'cn',\n    activeSections: [],\n    commentContent: '',\n    isDownloadingPdf: false,\n    defaultAvatar: '/images/kkz.jpg',\n    manualToggleStates: {}\n  }),\n  \n  actions: {\n    // 业务逻辑方法...\n  },\n  \n  getters: {\n    // 计算属性...\n  }\n})\n```\n\n3. 修改组件结构\n```vue\n<script setup>\nimport { storeToRefs } from 'pinia'\nimport { useCvStore } from '@/stores/cvStore'\n\nconst store = useCvStore()\nconst { \n  currentLang,\n  activeSections,\n  isDownloadingPdf,\n  cvData\n} = storeToRefs(store)\n\n// 方法代理\nconst handleLangChange = ({ key }) => store.handleLangChange(key)\nconst downloadPDF = () => store.downloadPDF(cvContainerRef.value)\n</script>\n```\n","source":"_posts/pinia重构.md","raw":"---\ntitle: pinia重构\ndate: 2025-04-28 22:05:46\ntags: web前端\n\n---\n### Pinia 重构过程记录\n#### 重构步骤\n\n1. 安装必要依赖\n```bash\nnpm install pinia\n```\n\n2. 创建 Pinia Store\n```js\n// stores/cvStore.js\nimport { defineStore } from 'pinia'\nimport { message } from 'ant-design-vue'\nimport cvDataStructure from '@/assets/data/cv-info.json'\nimport html2canvas from 'html2canvas'\nimport jsPDF from 'jspdf'\n\nexport const useCvStore = defineStore('cv', {\n  state: () => ({\n    currentLang: 'cn',\n    activeSections: [],\n    commentContent: '',\n    isDownloadingPdf: false,\n    defaultAvatar: '/images/kkz.jpg',\n    manualToggleStates: {}\n  }),\n  \n  actions: {\n    // 业务逻辑方法...\n  },\n  \n  getters: {\n    // 计算属性...\n  }\n})\n```\n\n3. 修改组件结构\n```vue\n<script setup>\nimport { storeToRefs } from 'pinia'\nimport { useCvStore } from '@/stores/cvStore'\n\nconst store = useCvStore()\nconst { \n  currentLang,\n  activeSections,\n  isDownloadingPdf,\n  cvData\n} = storeToRefs(store)\n\n// 方法代理\nconst handleLangChange = ({ key }) => store.handleLangChange(key)\nconst downloadPDF = () => store.downloadPDF(cvContainerRef.value)\n</script>\n```\n","slug":"pinia重构","published":1,"updated":"2025-07-08T01:44:29.143Z","comments":1,"layout":"post","photos":[],"_id":"cmcvej8l70004wstv5001bdee","content":"<h3 id=\"Pinia-重构过程记录\"><a href=\"#Pinia-重构过程记录\" class=\"headerlink\" title=\"Pinia 重构过程记录\"></a>Pinia 重构过程记录</h3><h4 id=\"重构步骤\"><a href=\"#重构步骤\" class=\"headerlink\" title=\"重构步骤\"></a>重构步骤</h4><ol>\n<li><p>安装必要依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pinia</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Pinia Store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// stores/cvStore.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; message &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ant-design-vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> cvDataStructure <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/assets/data/cv-info.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&#x27;html2canvas&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jsPDF <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jspdf&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useCvStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;cv&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">currentLang</span>: <span class=\"string\">&#x27;cn&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">activeSections</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">commentContent</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isDownloadingPdf</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">defaultAvatar</span>: <span class=\"string\">&#x27;/images/kkz.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">manualToggleStates</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑方法...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改组件结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">import &#123; useCvStore &#125; from &#x27;@/stores/cvStore&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = useCvStore()</span><br><span class=\"line\">const &#123; </span><br><span class=\"line\">  currentLang,</span><br><span class=\"line\">  activeSections,</span><br><span class=\"line\">  isDownloadingPdf,</span><br><span class=\"line\">  cvData</span><br><span class=\"line\">&#125; = storeToRefs(store)</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法代理</span><br><span class=\"line\">const handleLangChange = (&#123; key &#125;) =&gt; store.handleLangChange(key)</span><br><span class=\"line\">const downloadPDF = () =&gt; store.downloadPDF(cvContainerRef.value)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","length":1095,"excerpt":"","more":"<h3 id=\"Pinia-重构过程记录\"><a href=\"#Pinia-重构过程记录\" class=\"headerlink\" title=\"Pinia 重构过程记录\"></a>Pinia 重构过程记录</h3><h4 id=\"重构步骤\"><a href=\"#重构步骤\" class=\"headerlink\" title=\"重构步骤\"></a>重构步骤</h4><ol>\n<li><p>安装必要依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pinia</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Pinia Store</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// stores/cvStore.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;pinia&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; message &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;ant-design-vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> cvDataStructure <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/assets/data/cv-info.json&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> html2canvas <span class=\"keyword\">from</span> <span class=\"string\">&#x27;html2canvas&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> jsPDF <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jspdf&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> useCvStore = <span class=\"title function_\">defineStore</span>(<span class=\"string\">&#x27;cv&#x27;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">currentLang</span>: <span class=\"string\">&#x27;cn&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">activeSections</span>: [],</span><br><span class=\"line\">    <span class=\"attr\">commentContent</span>: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">isDownloadingPdf</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    <span class=\"attr\">defaultAvatar</span>: <span class=\"string\">&#x27;/images/kkz.jpg&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">manualToggleStates</span>: &#123;&#125;</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 业务逻辑方法...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 计算属性...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改组件结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script setup&gt;</span><br><span class=\"line\">import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class=\"line\">import &#123; useCvStore &#125; from &#x27;@/stores/cvStore&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">const store = useCvStore()</span><br><span class=\"line\">const &#123; </span><br><span class=\"line\">  currentLang,</span><br><span class=\"line\">  activeSections,</span><br><span class=\"line\">  isDownloadingPdf,</span><br><span class=\"line\">  cvData</span><br><span class=\"line\">&#125; = storeToRefs(store)</span><br><span class=\"line\"></span><br><span class=\"line\">// 方法代理</span><br><span class=\"line\">const handleLangChange = (&#123; key &#125;) =&gt; store.handleLangChange(key)</span><br><span class=\"line\">const downloadPDF = () =&gt; store.downloadPDF(cvContainerRef.value)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"github-actions","date":"2025-05-22T03:52:16.000Z","_content":"\n尝试了一下github的自动部署网站，进入actions后new一个workflow，添加以下代码并commit：\n\n```\nname: Deploy Vue Frontend\n\non:\n  push:\n    branches: [ \"main\" ]\n  workflow_dispatch: # 允许手动触发\n\n# 为 GITHUB_TOKEN 设置默认权限，以便部署到 GitHub Pages\npermissions:\n  contents: read      # checkout 代码需要\n  pages: write        # 部署到 GitHub Pages 需要\n  id-token: write     # OIDC 认证需要 (actions/deploy-pages 使用)\n\n# 只允许一个并发部署，跳过在队列中等待的运行。\n# 但是，不要取消进行中的运行，因为我们希望允许那些部署完成。\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: \"20\" # 或者你的项目使用的版本\n          cache: 'npm'\n          cache-dependency-path: client/package-lock.json # 更精确的缓存路径\n\n      - name: Install Dependencies\n        working-directory: ./client\n        run: npm ci # 使用 ci 更稳定\n\n      - name: Build\n        working-directory: ./client\n        run: npm run build # 确保你的 vite.config.js 中 base: '/仓库名/' 已设置\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v4 # 官方action\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3 # 官方action\n        with:\n          # 从 client/dist 目录上传\n          path: './client/dist'\n\n  deploy:\n    needs: build # 依赖 build job\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }} # 输出部署后的 URL\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4 # 官方action\n```\n\n在本地进行git pull后，在client目录下的vite.config.js里面添加这行代码base:'/{仓库名}/',package.json里面添加这行代码\"homepage\": \"https://kkzyu.github.io/{仓库名}\"。\n\n再到github的setting下进行以下操作：\n\n- pages下的source选择github actions；\n- environment下检查是否存在github-pages，点击进入查看是否有master这个分支；\n- actions的general下，勾选read and write permission以及Allow GitHub Actions to create and approve pull requests。\n\n\n\n在部署last1km的时候出现了很多路径上的问题，导致信息无法正常显示，这主要是因为在vite中把base改成了/last1km/后在解析的时候路径发生了变化，这也是写代码的时候不太规范导致的问题。\n\n以chatpage.vue为例，下面是对应的解决办法：\n\n```\n# 定义baseurl为vite下记录的url\nconst BASE_URL = import.meta.env.BASE_URL;\n# 由于在json文件里面保留了/对应的public路径，所以这里需要对路径格式进行修改，由于baseurl的last1km后面还跟着一个/，所以需要去掉其中的一个/\nconst resolveAssetPath = (relativePath) => {\n  if (!relativePath) return undefined;\n  let path = relativePath;\n  if (BASE_URL.endsWith('/') && path.startsWith('/')) {\n    path = path.substring(1);\n  } else if (!BASE_URL.endsWith('/') && !path.startsWith('/')) {\n  }\n  return `${BASE_URL}${path}`;\n};\n# 这个可以直接放到stores下用pinia管理，并导入\n# ......\n# 对应的在获取数据时也要进行以下更改\n    const fetchPath = 'data/messages.json'; // Path relative to public directory\n    const response = await fetch(`${BASE_URL}${fetchPath}`);\n    const riderData = currentChatData.rider ? {\n        ...currentChatData.rider,\n        // chatInfo.rider.avatar 的值如 \"/images/avatar1.jpg\"\n        // resolveAssetPath会处理它，变成 \"/last1km/images/avatar1.jpg\"\n        avatar: currentChatData.rider.avatar ? resolveAssetPath(currentChatData.rider.avatar) : undefined\n      } : null;\n```\n\n","source":"_posts/github-actions.md","raw":"---\ntitle: github-actions\ndate: 2025-05-22 11:52:16\ntags: [git, web前端]\n\n---\n\n尝试了一下github的自动部署网站，进入actions后new一个workflow，添加以下代码并commit：\n\n```\nname: Deploy Vue Frontend\n\non:\n  push:\n    branches: [ \"main\" ]\n  workflow_dispatch: # 允许手动触发\n\n# 为 GITHUB_TOKEN 设置默认权限，以便部署到 GitHub Pages\npermissions:\n  contents: read      # checkout 代码需要\n  pages: write        # 部署到 GitHub Pages 需要\n  id-token: write     # OIDC 认证需要 (actions/deploy-pages 使用)\n\n# 只允许一个并发部署，跳过在队列中等待的运行。\n# 但是，不要取消进行中的运行，因为我们希望允许那些部署完成。\nconcurrency:\n  group: \"pages\"\n  cancel-in-progress: false\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: \"20\" # 或者你的项目使用的版本\n          cache: 'npm'\n          cache-dependency-path: client/package-lock.json # 更精确的缓存路径\n\n      - name: Install Dependencies\n        working-directory: ./client\n        run: npm ci # 使用 ci 更稳定\n\n      - name: Build\n        working-directory: ./client\n        run: npm run build # 确保你的 vite.config.js 中 base: '/仓库名/' 已设置\n\n      - name: Setup Pages\n        uses: actions/configure-pages@v4 # 官方action\n\n      - name: Upload artifact\n        uses: actions/upload-pages-artifact@v3 # 官方action\n        with:\n          # 从 client/dist 目录上传\n          path: './client/dist'\n\n  deploy:\n    needs: build # 依赖 build job\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }} # 输出部署后的 URL\n    steps:\n      - name: Deploy to GitHub Pages\n        id: deployment\n        uses: actions/deploy-pages@v4 # 官方action\n```\n\n在本地进行git pull后，在client目录下的vite.config.js里面添加这行代码base:'/{仓库名}/',package.json里面添加这行代码\"homepage\": \"https://kkzyu.github.io/{仓库名}\"。\n\n再到github的setting下进行以下操作：\n\n- pages下的source选择github actions；\n- environment下检查是否存在github-pages，点击进入查看是否有master这个分支；\n- actions的general下，勾选read and write permission以及Allow GitHub Actions to create and approve pull requests。\n\n\n\n在部署last1km的时候出现了很多路径上的问题，导致信息无法正常显示，这主要是因为在vite中把base改成了/last1km/后在解析的时候路径发生了变化，这也是写代码的时候不太规范导致的问题。\n\n以chatpage.vue为例，下面是对应的解决办法：\n\n```\n# 定义baseurl为vite下记录的url\nconst BASE_URL = import.meta.env.BASE_URL;\n# 由于在json文件里面保留了/对应的public路径，所以这里需要对路径格式进行修改，由于baseurl的last1km后面还跟着一个/，所以需要去掉其中的一个/\nconst resolveAssetPath = (relativePath) => {\n  if (!relativePath) return undefined;\n  let path = relativePath;\n  if (BASE_URL.endsWith('/') && path.startsWith('/')) {\n    path = path.substring(1);\n  } else if (!BASE_URL.endsWith('/') && !path.startsWith('/')) {\n  }\n  return `${BASE_URL}${path}`;\n};\n# 这个可以直接放到stores下用pinia管理，并导入\n# ......\n# 对应的在获取数据时也要进行以下更改\n    const fetchPath = 'data/messages.json'; // Path relative to public directory\n    const response = await fetch(`${BASE_URL}${fetchPath}`);\n    const riderData = currentChatData.rider ? {\n        ...currentChatData.rider,\n        // chatInfo.rider.avatar 的值如 \"/images/avatar1.jpg\"\n        // resolveAssetPath会处理它，变成 \"/last1km/images/avatar1.jpg\"\n        avatar: currentChatData.rider.avatar ? resolveAssetPath(currentChatData.rider.avatar) : undefined\n      } : null;\n```\n\n","slug":"github-actions","published":1,"updated":"2025-07-08T01:44:29.143Z","comments":1,"layout":"post","photos":[],"_id":"cmcvej8l80005wstvcbw95ygo","content":"<p>尝试了一下github的自动部署网站，进入actions后new一个workflow，添加以下代码并commit：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Deploy Vue Frontend</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches: [ &quot;main&quot; ]</span><br><span class=\"line\">  workflow_dispatch: # 允许手动触发</span><br><span class=\"line\"></span><br><span class=\"line\"># 为 GITHUB_TOKEN 设置默认权限，以便部署到 GitHub Pages</span><br><span class=\"line\">permissions:</span><br><span class=\"line\">  contents: read      # checkout 代码需要</span><br><span class=\"line\">  pages: write        # 部署到 GitHub Pages 需要</span><br><span class=\"line\">  id-token: write     # OIDC 认证需要 (actions/deploy-pages 使用)</span><br><span class=\"line\"></span><br><span class=\"line\"># 只允许一个并发部署，跳过在队列中等待的运行。</span><br><span class=\"line\"># 但是，不要取消进行中的运行，因为我们希望允许那些部署完成。</span><br><span class=\"line\">concurrency:</span><br><span class=\"line\">  group: &quot;pages&quot;</span><br><span class=\"line\">  cancel-in-progress: false</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - name: Checkout</span><br><span class=\"line\">        uses: actions/checkout@v4</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Setup Node.js</span><br><span class=\"line\">        uses: actions/setup-node@v4</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &quot;20&quot; # 或者你的项目使用的版本</span><br><span class=\"line\">          cache: &#x27;npm&#x27;</span><br><span class=\"line\">          cache-dependency-path: client/package-lock.json # 更精确的缓存路径</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Install Dependencies</span><br><span class=\"line\">        working-directory: ./client</span><br><span class=\"line\">        run: npm ci # 使用 ci 更稳定</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Build</span><br><span class=\"line\">        working-directory: ./client</span><br><span class=\"line\">        run: npm run build # 确保你的 vite.config.js 中 base: &#x27;/仓库名/&#x27; 已设置</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Setup Pages</span><br><span class=\"line\">        uses: actions/configure-pages@v4 # 官方action</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Upload artifact</span><br><span class=\"line\">        uses: actions/upload-pages-artifact@v3 # 官方action</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          # 从 client/dist 目录上传</span><br><span class=\"line\">          path: &#x27;./client/dist&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">    needs: build # 依赖 build job</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      name: github-pages</span><br><span class=\"line\">      url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125; # 输出部署后的 URL</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - name: Deploy to GitHub Pages</span><br><span class=\"line\">        id: deployment</span><br><span class=\"line\">        uses: actions/deploy-pages@v4 # 官方action</span><br></pre></td></tr></table></figure>\n\n<p>在本地进行git pull后，在client目录下的vite.config.js里面添加这行代码base:’&#x2F;{仓库名}&#x2F;‘,package.json里面添加这行代码”homepage”: “<a href=\"https://kkzyu.github.io/%7B%E4%BB%93%E5%BA%93%E5%90%8D%7D%22%E3%80%82\">https://kkzyu.github.io/{仓库名}&quot;。</a></p>\n<p>再到github的setting下进行以下操作：</p>\n<ul>\n<li>pages下的source选择github actions；</li>\n<li>environment下检查是否存在github-pages，点击进入查看是否有master这个分支；</li>\n<li>actions的general下，勾选read and write permission以及Allow GitHub Actions to create and approve pull requests。</li>\n</ul>\n<p>在部署last1km的时候出现了很多路径上的问题，导致信息无法正常显示，这主要是因为在vite中把base改成了&#x2F;last1km&#x2F;后在解析的时候路径发生了变化，这也是写代码的时候不太规范导致的问题。</p>\n<p>以chatpage.vue为例，下面是对应的解决办法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义baseurl为vite下记录的url</span><br><span class=\"line\">const BASE_URL = import.meta.env.BASE_URL;</span><br><span class=\"line\"># 由于在json文件里面保留了/对应的public路径，所以这里需要对路径格式进行修改，由于baseurl的last1km后面还跟着一个/，所以需要去掉其中的一个/</span><br><span class=\"line\">const resolveAssetPath = (relativePath) =&gt; &#123;</span><br><span class=\"line\">  if (!relativePath) return undefined;</span><br><span class=\"line\">  let path = relativePath;</span><br><span class=\"line\">  if (BASE_URL.endsWith(&#x27;/&#x27;) &amp;&amp; path.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class=\"line\">    path = path.substring(1);</span><br><span class=\"line\">  &#125; else if (!BASE_URL.endsWith(&#x27;/&#x27;) &amp;&amp; !path.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return `$&#123;BASE_URL&#125;$&#123;path&#125;`;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"># 这个可以直接放到stores下用pinia管理，并导入</span><br><span class=\"line\"># ......</span><br><span class=\"line\"># 对应的在获取数据时也要进行以下更改</span><br><span class=\"line\">    const fetchPath = &#x27;data/messages.json&#x27;; // Path relative to public directory</span><br><span class=\"line\">    const response = await fetch(`$&#123;BASE_URL&#125;$&#123;fetchPath&#125;`);</span><br><span class=\"line\">    const riderData = currentChatData.rider ? &#123;</span><br><span class=\"line\">        ...currentChatData.rider,</span><br><span class=\"line\">        // chatInfo.rider.avatar 的值如 &quot;/images/avatar1.jpg&quot;</span><br><span class=\"line\">        // resolveAssetPath会处理它，变成 &quot;/last1km/images/avatar1.jpg&quot;</span><br><span class=\"line\">        avatar: currentChatData.rider.avatar ? resolveAssetPath(currentChatData.rider.avatar) : undefined</span><br><span class=\"line\">      &#125; : null;</span><br></pre></td></tr></table></figure>\n\n","length":2830,"excerpt":"","more":"<p>尝试了一下github的自动部署网站，进入actions后new一个workflow，添加以下代码并commit：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: Deploy Vue Frontend</span><br><span class=\"line\"></span><br><span class=\"line\">on:</span><br><span class=\"line\">  push:</span><br><span class=\"line\">    branches: [ &quot;main&quot; ]</span><br><span class=\"line\">  workflow_dispatch: # 允许手动触发</span><br><span class=\"line\"></span><br><span class=\"line\"># 为 GITHUB_TOKEN 设置默认权限，以便部署到 GitHub Pages</span><br><span class=\"line\">permissions:</span><br><span class=\"line\">  contents: read      # checkout 代码需要</span><br><span class=\"line\">  pages: write        # 部署到 GitHub Pages 需要</span><br><span class=\"line\">  id-token: write     # OIDC 认证需要 (actions/deploy-pages 使用)</span><br><span class=\"line\"></span><br><span class=\"line\"># 只允许一个并发部署，跳过在队列中等待的运行。</span><br><span class=\"line\"># 但是，不要取消进行中的运行，因为我们希望允许那些部署完成。</span><br><span class=\"line\">concurrency:</span><br><span class=\"line\">  group: &quot;pages&quot;</span><br><span class=\"line\">  cancel-in-progress: false</span><br><span class=\"line\"></span><br><span class=\"line\">jobs:</span><br><span class=\"line\">  build:</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - name: Checkout</span><br><span class=\"line\">        uses: actions/checkout@v4</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Setup Node.js</span><br><span class=\"line\">        uses: actions/setup-node@v4</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          node-version: &quot;20&quot; # 或者你的项目使用的版本</span><br><span class=\"line\">          cache: &#x27;npm&#x27;</span><br><span class=\"line\">          cache-dependency-path: client/package-lock.json # 更精确的缓存路径</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Install Dependencies</span><br><span class=\"line\">        working-directory: ./client</span><br><span class=\"line\">        run: npm ci # 使用 ci 更稳定</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Build</span><br><span class=\"line\">        working-directory: ./client</span><br><span class=\"line\">        run: npm run build # 确保你的 vite.config.js 中 base: &#x27;/仓库名/&#x27; 已设置</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Setup Pages</span><br><span class=\"line\">        uses: actions/configure-pages@v4 # 官方action</span><br><span class=\"line\"></span><br><span class=\"line\">      - name: Upload artifact</span><br><span class=\"line\">        uses: actions/upload-pages-artifact@v3 # 官方action</span><br><span class=\"line\">        with:</span><br><span class=\"line\">          # 从 client/dist 目录上传</span><br><span class=\"line\">          path: &#x27;./client/dist&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  deploy:</span><br><span class=\"line\">    needs: build # 依赖 build job</span><br><span class=\"line\">    runs-on: ubuntu-latest</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      name: github-pages</span><br><span class=\"line\">      url: $&#123;&#123; steps.deployment.outputs.page_url &#125;&#125; # 输出部署后的 URL</span><br><span class=\"line\">    steps:</span><br><span class=\"line\">      - name: Deploy to GitHub Pages</span><br><span class=\"line\">        id: deployment</span><br><span class=\"line\">        uses: actions/deploy-pages@v4 # 官方action</span><br></pre></td></tr></table></figure>\n\n<p>在本地进行git pull后，在client目录下的vite.config.js里面添加这行代码base:’&#x2F;{仓库名}&#x2F;‘,package.json里面添加这行代码”homepage”: “<a href=\"https://kkzyu.github.io/%7B%E4%BB%93%E5%BA%93%E5%90%8D%7D%22%E3%80%82\">https://kkzyu.github.io/{仓库名}&quot;。</a></p>\n<p>再到github的setting下进行以下操作：</p>\n<ul>\n<li>pages下的source选择github actions；</li>\n<li>environment下检查是否存在github-pages，点击进入查看是否有master这个分支；</li>\n<li>actions的general下，勾选read and write permission以及Allow GitHub Actions to create and approve pull requests。</li>\n</ul>\n<p>在部署last1km的时候出现了很多路径上的问题，导致信息无法正常显示，这主要是因为在vite中把base改成了&#x2F;last1km&#x2F;后在解析的时候路径发生了变化，这也是写代码的时候不太规范导致的问题。</p>\n<p>以chatpage.vue为例，下面是对应的解决办法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义baseurl为vite下记录的url</span><br><span class=\"line\">const BASE_URL = import.meta.env.BASE_URL;</span><br><span class=\"line\"># 由于在json文件里面保留了/对应的public路径，所以这里需要对路径格式进行修改，由于baseurl的last1km后面还跟着一个/，所以需要去掉其中的一个/</span><br><span class=\"line\">const resolveAssetPath = (relativePath) =&gt; &#123;</span><br><span class=\"line\">  if (!relativePath) return undefined;</span><br><span class=\"line\">  let path = relativePath;</span><br><span class=\"line\">  if (BASE_URL.endsWith(&#x27;/&#x27;) &amp;&amp; path.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class=\"line\">    path = path.substring(1);</span><br><span class=\"line\">  &#125; else if (!BASE_URL.endsWith(&#x27;/&#x27;) &amp;&amp; !path.startsWith(&#x27;/&#x27;)) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return `$&#123;BASE_URL&#125;$&#123;path&#125;`;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"># 这个可以直接放到stores下用pinia管理，并导入</span><br><span class=\"line\"># ......</span><br><span class=\"line\"># 对应的在获取数据时也要进行以下更改</span><br><span class=\"line\">    const fetchPath = &#x27;data/messages.json&#x27;; // Path relative to public directory</span><br><span class=\"line\">    const response = await fetch(`$&#123;BASE_URL&#125;$&#123;fetchPath&#125;`);</span><br><span class=\"line\">    const riderData = currentChatData.rider ? &#123;</span><br><span class=\"line\">        ...currentChatData.rider,</span><br><span class=\"line\">        // chatInfo.rider.avatar 的值如 &quot;/images/avatar1.jpg&quot;</span><br><span class=\"line\">        // resolveAssetPath会处理它，变成 &quot;/last1km/images/avatar1.jpg&quot;</span><br><span class=\"line\">        avatar: currentChatData.rider.avatar ? resolveAssetPath(currentChatData.rider.avatar) : undefined</span><br><span class=\"line\">      &#125; : null;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"仓库迁移","date":"2025-04-29T03:00:26.000Z","_content":"## 仓库迁移与合并\n1. 先删除现有远程仓库\n```bash\ngit remote remove githu\n```\n2. 添加新仓库为远程仓库\n```bash\ngit remote add github git@github.com:kkzyu/kkzyu.github.io.git\n```\n3. 验证远程仓库\n```bash\ngit remote -v\n```\n4. 获取仓库2代码\n```bash\ngit fetch github\n```\n5. 合并代码（保留双方历史）\n```bash\ngit merge github/main --allow-unrelated-histories\n```\n6. 解决冲突（重点关注以下文件）\n- 用编辑器处理冲突的.gitignore、package.json等\n- 保留Gitee仓库的.gitignore规则\n\n7. 提交变更\n```bash\ngit add .\ngit commit -m \"迁移完成：包含仓库2源码及网址文件\"\ngit push origin main\n```\n8. 验证代码完整性\n```bash\nnpm install && npm run dev # 确保能正常启动开发服务器\n```","source":"_posts/仓库迁移.md","raw":"---\ntitle: 仓库迁移\ndate: 2025-04-29 11:00:26\ntags: [git, web前端]\n\n\n---\n## 仓库迁移与合并\n1. 先删除现有远程仓库\n```bash\ngit remote remove githu\n```\n2. 添加新仓库为远程仓库\n```bash\ngit remote add github git@github.com:kkzyu/kkzyu.github.io.git\n```\n3. 验证远程仓库\n```bash\ngit remote -v\n```\n4. 获取仓库2代码\n```bash\ngit fetch github\n```\n5. 合并代码（保留双方历史）\n```bash\ngit merge github/main --allow-unrelated-histories\n```\n6. 解决冲突（重点关注以下文件）\n- 用编辑器处理冲突的.gitignore、package.json等\n- 保留Gitee仓库的.gitignore规则\n\n7. 提交变更\n```bash\ngit add .\ngit commit -m \"迁移完成：包含仓库2源码及网址文件\"\ngit push origin main\n```\n8. 验证代码完整性\n```bash\nnpm install && npm run dev # 确保能正常启动开发服务器\n```","slug":"仓库迁移","published":1,"updated":"2025-07-08T01:44:29.143Z","comments":1,"layout":"post","photos":[],"_id":"cmcvej8l90006wstvhfcpdd3p","content":"<h2 id=\"仓库迁移与合并\"><a href=\"#仓库迁移与合并\" class=\"headerlink\" title=\"仓库迁移与合并\"></a>仓库迁移与合并</h2><ol>\n<li>先删除现有远程仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove githu</span><br></pre></td></tr></table></figure></li>\n<li>添加新仓库为远程仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add github git@github.com:kkzyu/kkzyu.github.io.git</span><br></pre></td></tr></table></figure></li>\n<li>验证远程仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></li>\n<li>获取仓库2代码<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch github</span><br></pre></td></tr></table></figure></li>\n<li>合并代码（保留双方历史）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge github/main --allow-unrelated-histories</span><br></pre></td></tr></table></figure></li>\n<li>解决冲突（重点关注以下文件）</li>\n</ol>\n<ul>\n<li>用编辑器处理冲突的.gitignore、package.json等</li>\n<li>保留Gitee仓库的.gitignore规则</li>\n</ul>\n<ol start=\"7\">\n<li>提交变更<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;迁移完成：包含仓库2源码及网址文件&quot;</span></span><br><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure></li>\n<li>验证代码完整性<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &amp;&amp; npm run dev <span class=\"comment\"># 确保能正常启动开发服务器</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n","length":395,"excerpt":"","more":"<h2 id=\"仓库迁移与合并\"><a href=\"#仓库迁移与合并\" class=\"headerlink\" title=\"仓库迁移与合并\"></a>仓库迁移与合并</h2><ol>\n<li>先删除现有远程仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote remove githu</span><br></pre></td></tr></table></figure></li>\n<li>添加新仓库为远程仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add github git@github.com:kkzyu/kkzyu.github.io.git</span><br></pre></td></tr></table></figure></li>\n<li>验证远程仓库<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure></li>\n<li>获取仓库2代码<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch github</span><br></pre></td></tr></table></figure></li>\n<li>合并代码（保留双方历史）<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge github/main --allow-unrelated-histories</span><br></pre></td></tr></table></figure></li>\n<li>解决冲突（重点关注以下文件）</li>\n</ol>\n<ul>\n<li>用编辑器处理冲突的.gitignore、package.json等</li>\n<li>保留Gitee仓库的.gitignore规则</li>\n</ul>\n<ol start=\"7\">\n<li>提交变更<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;迁移完成：包含仓库2源码及网址文件&quot;</span></span><br><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure></li>\n<li>验证代码完整性<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install &amp;&amp; npm run dev <span class=\"comment\"># 确保能正常启动开发服务器</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"hexo blog部署记录","date":"2025-04-12T08:00:00.000Z","_content":"2025年4月28日，第一次尝试把hexo集成到个人主页中，记录一下部署过程，以及后期的更新和测试步骤。\n\n## 部署过程\n\n### 创建hexo项目\n\nhexo是github上一个开源的博客模板，首先可以在新目录下创建一个hexo项目，然后进入该目录，执行如下命令：\n\n``` bash\n$ npm install -g hexo-cli\n```\n\n接着进行一个初始化，进行初始化之后会创建一个新的hexo项目，自动克隆hexo-start和landscape主题：\n\n``` bash\n$ hexo init myblog\n$ cd myblog\n$ npm install\n```\n初始化之后，项目文件夹如下所示：\n.\n├── _config.yml（网站配置文件，以下的修改调整主要在这个文件下进行）\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n\n\n### 本地测试\n默认地址是http://localhost:4000/\n``` bash\n$ hexo server\n```\n\n### 选择主题\n   \nhexo默认的主题比较简约，但它提供了非常多的模板，在https://hexo.io/themes/上可以挑选主题，我这里用的是vivia（https://github.com/saicaca/hexo-theme-vivia）。接着按README步骤安装执行即可。\n\n### 部署到github pages上\n#### 1.部署个人网站\n\n首先需要确认github上已有<username>.github.io的仓库，用于存放个人主页的代码。这里对创建过程进行一个简单的介绍：\n把个人主页网站的所有代码copy到一个本地的新文件夹下，然后再在github上新建一个仓库（命名为<username>.github.io,比如我的username是kkzyu），接着在本地文件夹中执行如下命令：\n\n``` bash\n$ git remote add origin git@github.com:kkzyu/kkzyu.github.io.git\n$ git branch -M main\n$ git push -u origin main\n```\n\npush成功后，进入setting->pages->branch，选择main和root，点击save。等待十分钟之后即可在https://kkzyu.github.io/查看自己的个人主页。\n\n#### 2.部署博客\n\n首先需要编辑myblog/_config.yml文件，修改/增加如下代码：\n    \n``` yaml\n# 部署配置\ndeploy:\n  type: git\n  repo: https://github.com/kkzyu/blog.git \n  branch: gh-pages  # 必须使用 gh-pages 分支\n  message: \"更新博客：{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n\n# URL 设置\nurl: https://kkzyu.github.io/blog\nroot: /blog/\n```\n\n由于hexo博客和个人主页独立部署更优（少冲突），因此在github上新建一个仓库（可以命名为myblog），注意无需初始化readme或其他文件。创建完成后，同样需要将本地的仓库推送上去：\n\n``` bash\n$ git remote add origin git@github.com:kkzyu/myblog.git\n$ git branch -M main\n$ git push -u origin main\n```  \n\n接着在本地myblog文件夹下安装部署插件并部署：\n\n``` bash\n$ npm install hexo-deployer-git --save\n$ hexo clean && hexo generate && hexo deploy\n```\n\n接着进入myblog仓库的settings->pages，选择branch为gh-pages，选择root目录。之后等待几分钟，进入到https://kkzyu.github.io/blog/，即可看到自己的博客。\n\n### 将博客集成到vue个人主页中\n\n在vue项目中，修改路由配置(router/index.js)：\n\n``` js\nconst routes = [{\n    path: '/blog',\n    name: 'Blog',\n    beforeEnter() {\n      window.open('https://kkzyu.github.io/blog/', '_blank')\n      // 或者不新开标签页：\n      // window.location.href = 'https://kkzyu.github.io/blog/'\n    }\n  }]\n```\n\n在APP.vue中添加博客链接：\n\n``` vue\n<router-link to=\"/blog\">Blog</router-link>\n```\n\n等待几分钟之后，即可在vue项目中看到博客链接，点击后会在新标签页打开博客。\n\n## 后期更新和测试\n### 更新博客\n\n在本地对myblog进行了修改后，网页并不会自动更新，需要进行一下操作才可在网页中观察到更新后内容：\n\n``` bash\nhexo clean \nhexo generate\nhexo deploy\n#可选：将源码变更推送到main分支备份\ngit add .\ngit commit -m \"更新博客内容\"\ngit push origin main\n```\n\n如果想要现在本地进行测试可以执行：\n\n``` bash\n$ hexo server\n```\n\n待测试成功后，再进行更新。","source":"_posts/hello-world.md","raw":"---\ntitle: hexo blog部署记录\ndate: 2025-04-12 16:00:00\ntags: web前端\n\n---\n2025年4月28日，第一次尝试把hexo集成到个人主页中，记录一下部署过程，以及后期的更新和测试步骤。\n\n## 部署过程\n\n### 创建hexo项目\n\nhexo是github上一个开源的博客模板，首先可以在新目录下创建一个hexo项目，然后进入该目录，执行如下命令：\n\n``` bash\n$ npm install -g hexo-cli\n```\n\n接着进行一个初始化，进行初始化之后会创建一个新的hexo项目，自动克隆hexo-start和landscape主题：\n\n``` bash\n$ hexo init myblog\n$ cd myblog\n$ npm install\n```\n初始化之后，项目文件夹如下所示：\n.\n├── _config.yml（网站配置文件，以下的修改调整主要在这个文件下进行）\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n\n\n### 本地测试\n默认地址是http://localhost:4000/\n``` bash\n$ hexo server\n```\n\n### 选择主题\n   \nhexo默认的主题比较简约，但它提供了非常多的模板，在https://hexo.io/themes/上可以挑选主题，我这里用的是vivia（https://github.com/saicaca/hexo-theme-vivia）。接着按README步骤安装执行即可。\n\n### 部署到github pages上\n#### 1.部署个人网站\n\n首先需要确认github上已有<username>.github.io的仓库，用于存放个人主页的代码。这里对创建过程进行一个简单的介绍：\n把个人主页网站的所有代码copy到一个本地的新文件夹下，然后再在github上新建一个仓库（命名为<username>.github.io,比如我的username是kkzyu），接着在本地文件夹中执行如下命令：\n\n``` bash\n$ git remote add origin git@github.com:kkzyu/kkzyu.github.io.git\n$ git branch -M main\n$ git push -u origin main\n```\n\npush成功后，进入setting->pages->branch，选择main和root，点击save。等待十分钟之后即可在https://kkzyu.github.io/查看自己的个人主页。\n\n#### 2.部署博客\n\n首先需要编辑myblog/_config.yml文件，修改/增加如下代码：\n    \n``` yaml\n# 部署配置\ndeploy:\n  type: git\n  repo: https://github.com/kkzyu/blog.git \n  branch: gh-pages  # 必须使用 gh-pages 分支\n  message: \"更新博客：{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n\n# URL 设置\nurl: https://kkzyu.github.io/blog\nroot: /blog/\n```\n\n由于hexo博客和个人主页独立部署更优（少冲突），因此在github上新建一个仓库（可以命名为myblog），注意无需初始化readme或其他文件。创建完成后，同样需要将本地的仓库推送上去：\n\n``` bash\n$ git remote add origin git@github.com:kkzyu/myblog.git\n$ git branch -M main\n$ git push -u origin main\n```  \n\n接着在本地myblog文件夹下安装部署插件并部署：\n\n``` bash\n$ npm install hexo-deployer-git --save\n$ hexo clean && hexo generate && hexo deploy\n```\n\n接着进入myblog仓库的settings->pages，选择branch为gh-pages，选择root目录。之后等待几分钟，进入到https://kkzyu.github.io/blog/，即可看到自己的博客。\n\n### 将博客集成到vue个人主页中\n\n在vue项目中，修改路由配置(router/index.js)：\n\n``` js\nconst routes = [{\n    path: '/blog',\n    name: 'Blog',\n    beforeEnter() {\n      window.open('https://kkzyu.github.io/blog/', '_blank')\n      // 或者不新开标签页：\n      // window.location.href = 'https://kkzyu.github.io/blog/'\n    }\n  }]\n```\n\n在APP.vue中添加博客链接：\n\n``` vue\n<router-link to=\"/blog\">Blog</router-link>\n```\n\n等待几分钟之后，即可在vue项目中看到博客链接，点击后会在新标签页打开博客。\n\n## 后期更新和测试\n### 更新博客\n\n在本地对myblog进行了修改后，网页并不会自动更新，需要进行一下操作才可在网页中观察到更新后内容：\n\n``` bash\nhexo clean \nhexo generate\nhexo deploy\n#可选：将源码变更推送到main分支备份\ngit add .\ngit commit -m \"更新博客内容\"\ngit push origin main\n```\n\n如果想要现在本地进行测试可以执行：\n\n``` bash\n$ hexo server\n```\n\n待测试成功后，再进行更新。","slug":"hello-world","published":1,"updated":"2025-07-08T01:44:29.143Z","comments":1,"layout":"post","photos":[],"_id":"cmcvej8l90008wstvaijc02fd","content":"<p>2025年4月28日，第一次尝试把hexo集成到个人主页中，记录一下部署过程，以及后期的更新和测试步骤。</p>\n<h2 id=\"部署过程\"><a href=\"#部署过程\" class=\"headerlink\" title=\"部署过程\"></a>部署过程</h2><h3 id=\"创建hexo项目\"><a href=\"#创建hexo项目\" class=\"headerlink\" title=\"创建hexo项目\"></a>创建hexo项目</h3><p>hexo是github上一个开源的博客模板，首先可以在新目录下创建一个hexo项目，然后进入该目录，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>接着进行一个初始化，进行初始化之后会创建一个新的hexo项目，自动克隆hexo-start和landscape主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init myblog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myblog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>初始化之后，项目文件夹如下所示：<br>.<br>├── _config.yml（网站配置文件，以下的修改调整主要在这个文件下进行）<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3><p>默认地址是<a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h3><p>hexo默认的主题比较简约，但它提供了非常多的模板，在<a href=\"https://hexo.io/themes/%E4%B8%8A%E5%8F%AF%E4%BB%A5%E6%8C%91%E9%80%89%E4%B8%BB%E9%A2%98%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E7%94%A8%E7%9A%84%E6%98%AFvivia%EF%BC%88https://github.com/saicaca/hexo-theme-vivia%EF%BC%89%E3%80%82%E6%8E%A5%E7%9D%80%E6%8C%89README%E6%AD%A5%E9%AA%A4%E5%AE%89%E8%A3%85%E6%89%A7%E8%A1%8C%E5%8D%B3%E5%8F%AF%E3%80%82\">https://hexo.io/themes/上可以挑选主题，我这里用的是vivia（https://github.com/saicaca/hexo-theme-vivia）。接着按README步骤安装执行即可。</a></p>\n<h3 id=\"部署到github-pages上\"><a href=\"#部署到github-pages上\" class=\"headerlink\" title=\"部署到github pages上\"></a>部署到github pages上</h3><h4 id=\"1-部署个人网站\"><a href=\"#1-部署个人网站\" class=\"headerlink\" title=\"1.部署个人网站\"></a>1.部署个人网站</h4><p>首先需要确认github上已有<username>.github.io的仓库，用于存放个人主页的代码。这里对创建过程进行一个简单的介绍：<br>把个人主页网站的所有代码copy到一个本地的新文件夹下，然后再在github上新建一个仓库（命名为<username>.github.io,比如我的username是kkzyu），接着在本地文件夹中执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:kkzyu/kkzyu.github.io.git</span><br><span class=\"line\">$ git branch -M main</span><br><span class=\"line\">$ git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<p>push成功后，进入setting-&gt;pages-&gt;branch，选择main和root，点击save。等待十分钟之后即可在<a href=\"https://kkzyu.github.io/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E3%80%82\">https://kkzyu.github.io/查看自己的个人主页。</a></p>\n<h4 id=\"2-部署博客\"><a href=\"#2-部署博客\" class=\"headerlink\" title=\"2.部署博客\"></a>2.部署博客</h4><p>首先需要编辑myblog&#x2F;_config.yml文件，修改&#x2F;增加如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署配置</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/kkzyu/blog.git</span> </span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span>  <span class=\"comment\"># 必须使用 gh-pages 分支</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">&quot;更新博客：<span class=\"template-variable\">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL 设置</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://kkzyu.github.io/blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/blog/</span></span><br></pre></td></tr></table></figure>\n\n<p>由于hexo博客和个人主页独立部署更优（少冲突），因此在github上新建一个仓库（可以命名为myblog），注意无需初始化readme或其他文件。创建完成后，同样需要将本地的仓库推送上去：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:kkzyu/myblog.git</span><br><span class=\"line\">$ git branch -M main</span><br><span class=\"line\">$ git push -u origin main</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">接着在本地myblog文件夹下安装部署插件并部署：</span><br><span class=\"line\"></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>接着进入myblog仓库的settings-&gt;pages，选择branch为gh-pages，选择root目录。之后等待几分钟，进入到<a href=\"https://kkzyu.github.io/blog/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E3%80%82\">https://kkzyu.github.io/blog/，即可看到自己的博客。</a></p>\n<h3 id=\"将博客集成到vue个人主页中\"><a href=\"#将博客集成到vue个人主页中\" class=\"headerlink\" title=\"将博客集成到vue个人主页中\"></a>将博客集成到vue个人主页中</h3><p>在vue项目中，修改路由配置(router&#x2F;index.js)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/blog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Blog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">beforeEnter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;https://kkzyu.github.io/blog/&#x27;</span>, <span class=\"string\">&#x27;_blank&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 或者不新开标签页：</span></span><br><span class=\"line\">      <span class=\"comment\">// window.location.href = &#x27;https://kkzyu.github.io/blog/&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>在APP.vue中添加博客链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/blog&quot;&gt;Blog&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n\n<p>等待几分钟之后，即可在vue项目中看到博客链接，点击后会在新标签页打开博客。</p>\n<h2 id=\"后期更新和测试\"><a href=\"#后期更新和测试\" class=\"headerlink\" title=\"后期更新和测试\"></a>后期更新和测试</h2><h3 id=\"更新博客\"><a href=\"#更新博客\" class=\"headerlink\" title=\"更新博客\"></a>更新博客</h3><p>在本地对myblog进行了修改后，网页并不会自动更新，需要进行一下操作才可在网页中观察到更新后内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br><span class=\"line\"><span class=\"comment\">#可选：将源码变更推送到main分支备份</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;更新博客内容&quot;</span></span><br><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n\n<p>如果想要现在本地进行测试可以执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>待测试成功后，再进行更新。</p>\n","length":2263,"excerpt":"","more":"<p>2025年4月28日，第一次尝试把hexo集成到个人主页中，记录一下部署过程，以及后期的更新和测试步骤。</p>\n<h2 id=\"部署过程\"><a href=\"#部署过程\" class=\"headerlink\" title=\"部署过程\"></a>部署过程</h2><h3 id=\"创建hexo项目\"><a href=\"#创建hexo项目\" class=\"headerlink\" title=\"创建hexo项目\"></a>创建hexo项目</h3><p>hexo是github上一个开源的博客模板，首先可以在新目录下创建一个hexo项目，然后进入该目录，执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>接着进行一个初始化，进行初始化之后会创建一个新的hexo项目，自动克隆hexo-start和landscape主题：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init myblog</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> myblog</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n<p>初始化之后，项目文件夹如下所示：<br>.<br>├── _config.yml（网站配置文件，以下的修改调整主要在这个文件下进行）<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p>\n<h3 id=\"本地测试\"><a href=\"#本地测试\" class=\"headerlink\" title=\"本地测试\"></a>本地测试</h3><p>默认地址是<a href=\"http://localhost:4000/\">http://localhost:4000/</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"选择主题\"><a href=\"#选择主题\" class=\"headerlink\" title=\"选择主题\"></a>选择主题</h3><p>hexo默认的主题比较简约，但它提供了非常多的模板，在<a href=\"https://hexo.io/themes/%E4%B8%8A%E5%8F%AF%E4%BB%A5%E6%8C%91%E9%80%89%E4%B8%BB%E9%A2%98%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E7%94%A8%E7%9A%84%E6%98%AFvivia%EF%BC%88https://github.com/saicaca/hexo-theme-vivia%EF%BC%89%E3%80%82%E6%8E%A5%E7%9D%80%E6%8C%89README%E6%AD%A5%E9%AA%A4%E5%AE%89%E8%A3%85%E6%89%A7%E8%A1%8C%E5%8D%B3%E5%8F%AF%E3%80%82\">https://hexo.io/themes/上可以挑选主题，我这里用的是vivia（https://github.com/saicaca/hexo-theme-vivia）。接着按README步骤安装执行即可。</a></p>\n<h3 id=\"部署到github-pages上\"><a href=\"#部署到github-pages上\" class=\"headerlink\" title=\"部署到github pages上\"></a>部署到github pages上</h3><h4 id=\"1-部署个人网站\"><a href=\"#1-部署个人网站\" class=\"headerlink\" title=\"1.部署个人网站\"></a>1.部署个人网站</h4><p>首先需要确认github上已有<username>.github.io的仓库，用于存放个人主页的代码。这里对创建过程进行一个简单的介绍：<br>把个人主页网站的所有代码copy到一个本地的新文件夹下，然后再在github上新建一个仓库（命名为<username>.github.io,比如我的username是kkzyu），接着在本地文件夹中执行如下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:kkzyu/kkzyu.github.io.git</span><br><span class=\"line\">$ git branch -M main</span><br><span class=\"line\">$ git push -u origin main</span><br></pre></td></tr></table></figure>\n\n<p>push成功后，进入setting-&gt;pages-&gt;branch，选择main和root，点击save。等待十分钟之后即可在<a href=\"https://kkzyu.github.io/%E6%9F%A5%E7%9C%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E3%80%82\">https://kkzyu.github.io/查看自己的个人主页。</a></p>\n<h4 id=\"2-部署博客\"><a href=\"#2-部署博客\" class=\"headerlink\" title=\"2.部署博客\"></a>2.部署博客</h4><p>首先需要编辑myblog&#x2F;_config.yml文件，修改&#x2F;增加如下代码：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 部署配置</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/kkzyu/blog.git</span> </span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">gh-pages</span>  <span class=\"comment\"># 必须使用 gh-pages 分支</span></span><br><span class=\"line\">  <span class=\"attr\">message:</span> <span class=\"string\">&quot;更新博客：<span class=\"template-variable\">&#123;&#123; now(&#x27;YYYY-MM-DD HH:mm:ss&#x27;) &#125;&#125;</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># URL 设置</span></span><br><span class=\"line\"><span class=\"attr\">url:</span> <span class=\"string\">https://kkzyu.github.io/blog</span></span><br><span class=\"line\"><span class=\"attr\">root:</span> <span class=\"string\">/blog/</span></span><br></pre></td></tr></table></figure>\n\n<p>由于hexo博客和个人主页独立部署更优（少冲突），因此在github上新建一个仓库（可以命名为myblog），注意无需初始化readme或其他文件。创建完成后，同样需要将本地的仓库推送上去：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git remote add origin git@github.com:kkzyu/myblog.git</span><br><span class=\"line\">$ git branch -M main</span><br><span class=\"line\">$ git push -u origin main</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">接着在本地myblog文件夹下安装部署插件并部署：</span><br><span class=\"line\"></span><br><span class=\"line\">``` bash</span><br><span class=\"line\">$ npm install hexo-deployer-git --save</span><br><span class=\"line\">$ hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>接着进入myblog仓库的settings-&gt;pages，选择branch为gh-pages，选择root目录。之后等待几分钟，进入到<a href=\"https://kkzyu.github.io/blog/%EF%BC%8C%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E3%80%82\">https://kkzyu.github.io/blog/，即可看到自己的博客。</a></p>\n<h3 id=\"将博客集成到vue个人主页中\"><a href=\"#将博客集成到vue个人主页中\" class=\"headerlink\" title=\"将博客集成到vue个人主页中\"></a>将博客集成到vue个人主页中</h3><p>在vue项目中，修改路由配置(router&#x2F;index.js)：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes = [&#123;</span><br><span class=\"line\">    <span class=\"attr\">path</span>: <span class=\"string\">&#x27;/blog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Blog&#x27;</span>,</span><br><span class=\"line\">    <span class=\"title function_\">beforeEnter</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">window</span>.<span class=\"title function_\">open</span>(<span class=\"string\">&#x27;https://kkzyu.github.io/blog/&#x27;</span>, <span class=\"string\">&#x27;_blank&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 或者不新开标签页：</span></span><br><span class=\"line\">      <span class=\"comment\">// window.location.href = &#x27;https://kkzyu.github.io/blog/&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;]</span><br></pre></td></tr></table></figure>\n\n<p>在APP.vue中添加博客链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link to=&quot;/blog&quot;&gt;Blog&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>\n\n<p>等待几分钟之后，即可在vue项目中看到博客链接，点击后会在新标签页打开博客。</p>\n<h2 id=\"后期更新和测试\"><a href=\"#后期更新和测试\" class=\"headerlink\" title=\"后期更新和测试\"></a>后期更新和测试</h2><h3 id=\"更新博客\"><a href=\"#更新博客\" class=\"headerlink\" title=\"更新博客\"></a>更新博客</h3><p>在本地对myblog进行了修改后，网页并不会自动更新，需要进行一下操作才可在网页中观察到更新后内容：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br><span class=\"line\"><span class=\"comment\">#可选：将源码变更推送到main分支备份</span></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">&quot;更新博客内容&quot;</span></span><br><span class=\"line\">git push origin main</span><br></pre></td></tr></table></figure>\n\n<p>如果想要现在本地进行测试可以执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>待测试成功后，再进行更新。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cmcvej8l90008wstvaijc02fd","tag_id":"cmcvej8l90007wstv8bth6zlo","_id":"cmcvej8lb000awstvcir37zhg"},{"post_id":"cmcvej8l00001wstvf49o5ijy","tag_id":"cmcvej8l50003wstv3pfp97ek","_id":"cmcvej8lb000bwstv4x7p149b"},{"post_id":"cmcvej8l00001wstvf49o5ijy","tag_id":"cmcvej8l90007wstv8bth6zlo","_id":"cmcvej8lc000dwstv3zibeiap"},{"post_id":"cmcvej8l30002wstv6ag80o8q","tag_id":"cmcvej8l50003wstv3pfp97ek","_id":"cmcvej8lc000fwstv96zmbqgh"},{"post_id":"cmcvej8l30002wstv6ag80o8q","tag_id":"cmcvej8l90007wstv8bth6zlo","_id":"cmcvej8lc000gwstv0z101c09"},{"post_id":"cmcvej8l70004wstv5001bdee","tag_id":"cmcvej8l90007wstv8bth6zlo","_id":"cmcvej8lc000iwstvfgen9n6u"},{"post_id":"cmcvej8l80005wstvcbw95ygo","tag_id":"cmcvej8lc000hwstv00a11s96","_id":"cmcvej8ld000lwstv2vq6402s"},{"post_id":"cmcvej8l80005wstvcbw95ygo","tag_id":"cmcvej8l90007wstv8bth6zlo","_id":"cmcvej8ld000mwstv0h2p9gq2"},{"post_id":"cmcvej8l90006wstvhfcpdd3p","tag_id":"cmcvej8lc000hwstv00a11s96","_id":"cmcvej8ld000owstv59j74y19"},{"post_id":"cmcvej8l90006wstvhfcpdd3p","tag_id":"cmcvej8l90007wstv8bth6zlo","_id":"cmcvej8ld000pwstv8s3f3beg"}],"Tag":[{"name":"react","_id":"cmcvej8l50003wstv3pfp97ek"},{"name":"web前端","_id":"cmcvej8l90007wstv8bth6zlo"},{"name":"git","_id":"cmcvej8lc000hwstv00a11s96"}]}}